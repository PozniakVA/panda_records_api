import os
from datetime import datetime

from django.contrib.auth import get_user_model
from telebot import types

from notifications.bot import bot
from notifications.models import Chat, Notification


def send_welcome_message(message):
    bot.send_message(
        message.chat.id,
        """
üëã –ü—Ä–∏–≤—ñ—Ç! üëã
–Ø ùó£ùóÆùóªùó±ùóÆùó•ùó≤ùó∞ùóºùóøùó±ùòÄùóïùóºùòÅ, –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫.
–Ø –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏–º—É –≤–∞—Å —â–æ—Ä–∞–∑—É, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞—Ö–æ—á—É—Ç—å –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ —â–æ–¥–æ –ø–æ—Å–ª—É–≥ PandaRecords.

–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ:
‚û™ /all_commands
        """
    )


def connect_telegram_user_with_user_from_db(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            url=f"https://{os.getenv("DOMAIN")}/api/admin/"
        )
    )

    text = message.text.split()
    if len(text) > 1:
        token = message.text.split()[1]
        user = get_user_model().objects.get(token=token)
        Chat.objects.create(user=user, chat_id=message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            """
‚ö†Ô∏è –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ
 —É–≤—ñ–π–¥—ñ—Ç—å –¥–æ –±–æ—Ç–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –¥–æ—Å—Ç—É–ø–Ω–∏–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
""", reply_markup=markup
        )


def send_notification_to_admin_about_client(notification):

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ",
            callback_data="done"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤ –ø—Ä–æ—Ü–µ—Å—ñ",
            callback_data="in_process"
        )
    )

    chats = Chat.objects.filter(
        user__is_staff=True,
        chat_id__isnull=False,
        notify_allowed=True,
    )

    created_at = datetime.fromisoformat(notification["created_at"])
    formatted_date = created_at.strftime("%d %B %Y, %H:%M")

    if notification["status"] == Notification.NotificationStatus.PENDING.label:
        title = "üîî –ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è! üîî"
    elif notification["status"] == Notification.NotificationStatus.PROCESSING.label:
        title = "üîÑ –í –ø—Ä–æ—Ü–µ—Å—ñ –æ–±—Ä–æ–±–∫–∏ üîÑ"
    else:
        title = "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ ‚úÖ"

    for chat in chats:
        try:
            bot.send_message(
                chat.chat_id,
                f"""
{title}

ID: {notification["id"]}
–°—Ç–∞—Ç—É—Å: {notification["status"]}

–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞ ‚û™ {notification["name"]}
Email ‚û™ {notification["email"]}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚û™ {notification["phone_number"]}

–ß–∞—Å –∑–∞–ø–∏—Ç—É ‚û™ {formatted_date}

‚¨áÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚¨áÔ∏è
{notification["message"]}
""", reply_markup=markup
            )
        except Exception as e:
            print(f"Failed to send the message to the chat {chat.chat_id}: {e}")

def stop_notifications(message):
    chat = Chat.objects.get(chat_id=message.chat.id)
    chat.notify_allowed = True

    bot.send_message(
        message.chat.id,
        """
üîï –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ üîï
–¢–µ–ø–µ—Ä –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ —Ö–æ—á—É—Ç—å –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ PandaRecords.

üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üîî
–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–æ–≤—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é:
‚û™ /start_notifications
        """
    )


def start_notifications(message):
    chat = Chat.objects.get(chat_id=message.chat.id)
    chat.notify_allowed = False

    bot.send_message(
        message.chat.id,
        """
üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ üîî
–¢–µ–ø–µ—Ä –≤–∏ –ø–æ—á–Ω–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞–∂–∞—é—Ç—å –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ PandaRecords.

üîï –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üîï
–Ø–∫—â–æ –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚û™ /stop_notifications
        """
    )


def show_all_commands(message):
    bot.send_message(
        message.chat.id,
        """
‚û™ /all_commands, /help
üìù –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ —ñ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏

‚û™ /total_new_notifications
üìä –ü–æ–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è

‚û™ /stop_notifications
‚õî –í–∏–º–∫–Ω–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å

‚û™ /start_notifications
üîî –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å

‚û™ /start
üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
"""
    )


def total_new_notifications(message):
    new_notifications = len(
        Notification.objects.filter(
            status=Notification.NotificationStatus.PENDING
        )
    )
    processing_notifications = len(
        Notification.objects.filter(
            status=Notification.NotificationStatus.PROCESSING
        )
    )

    bot.send_message(
        message.chat.id,
        f"""
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ‚û™ üÜï  {new_notifications}  üÜï

–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ —Ä–æ–∑–≥–ª—è–¥–∞—é—Ç—å—Å—è ‚û™ üîÑ  {processing_notifications}  üîÑ
"""
    )
